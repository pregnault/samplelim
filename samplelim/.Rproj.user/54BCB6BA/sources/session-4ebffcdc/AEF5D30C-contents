library(coda)
library(statip)
library(pracma)
library(stats)
library(tidyverse)


## jump Diagnostic

current_row<-list(modele=character(),nUnknowns=integer(),sampleSize=integer(),algo=character(),jmp_type=character(),jmp=double(),sampleIndex=integer(),fluxIndex=double(),flux_min=double(),flux_max=double(),flux_mean=double(),flux_median=double(),flux_Q1=double(),flux_Q3=double(),time=double(),RL_M=double(),RL_N=double(),RL_Nmin=double(),RL_I=double(),RL_k=double(),Geweke=double(),HD=double(),ESS=double(),sample=list())
#current_row<-list(modele=character(),nUnknowns=integer(),sampleSize=integer(),algo=character(),jmp_type=character(),jmp=double(),sampleIndex=integer(),fluxIndex=double(),flux_min=double(),flux_max=double(),flux_mean=double(),flux_median=double(),flux_Q1=double(),flux_Q3=double(),time=double(),Geweke=double(),HD=double(),ESS=double(),sample=list())
dataset=list()
m="ecoli"
nUnknowns=95
current_row["modele"]=m
current_row["nUnknowns"]=nUnknowns
current_row["sampleSize"]=niter

for (n in 1:nrow(bench)){
  print(n)
  row_bench<-bench[n,]
  current_row["modele"]=row_bench[1]
  current_row["nUnknowns"]=nUnknowns
  current_row["time"]=row_bench[7]
  alg=row_bench[3]
  current_row["algo"]=alg
  i=row_bench[6]
  current_row["sampleIndex"]=i
  jmp_type=row_bench[4]
  jmp=row_bench[5]
  current_row["jmp_type"]=jmp_type
  current_row["jmp"]=jmp
  sample<-read.csv(row_bench[[8]],header = TRUE)[,2:(nUnknowns+1)]

  for (j in 1:nUnknowns){
    current_row["fluxIndex"]=j
    flux_sample<-c(sample[,j])
    current_row["sample"]<-list(flux_sample)
    sample_quantiles<-quantile(flux_sample,names=FALSE)
    current_row["flux_min"]<-sample_quantiles[1]
    current_row["flux_Q1"]<-sample_quantiles[2]
    current_row["flux_median"]<-sample_quantiles[3]
    current_row["flux_Q3"]<-sample_quantiles[4]
    current_row["flux_max"]<-sample_quantiles[5]
    current_row["flux_mean"]<-mean(flux_sample)
    
    #Raftery Lewis
      
    data<-mcmc(data= flux_sample, start = 1, end = niter, thin = 1)
    
    raftery_lewis<-raftery.diag(data, q=0.025, r=0.005, s=0.95, converge.eps=0.001)
    res_rl<-raftery_lewis[["resmatrix"]]
    current_row["RL_M"]<-res_rl[[1,1]]
    current_row["RL_N"]<-res_rl[[1,2]]
    current_row["RL_Nmin"]<-res_rl[[1,3]]
    current_row["RL_I"]<-res_rl[[1,4]]
    current_row["RL_k"]<-res_rl[[1,5]]
    
    #Geweke
    
    current_row["Geweke"]<-geweke.diag(data, frac1=0.1, frac2=0.5)$z
    
    #Hellinger Distance
    r1<-as.integer(niter/3)
    r2<-as.integer(2*niter/3)
    
    p1<-as.vector(flux_sample[1:r1])
    p1_dens<-densityfun(p1)
    p3<-as.vector(flux_sample[r2:niter])
    p3_dens<-densityfun(p3)
    fun <-function(x) (sqrt(p1_dens(x))-sqrt(p3_dens(x)))**2
    current_row["HD"]<-sqrt(0.5*integral(fun=fun,-Inf,Inf) )
    
    #ESS
    current_row["ESS"]<-effectiveSize(data)
    
    # Add to big dataset
    dataset<-rbind(dataset,current_row)
  }
  
  }



#rangelist
theorical_min<-c()
theorical_max<-c()
rangeCoverage<-c()

for (i in 1:nrow(dataset)){
  minimum<-theorical_ranges[dataset[[i,8]],1]
  theorical_min<-append(theorical_min,minimum)
  maximum<-theorical_ranges[dataset[[i,8]],2]
  theorical_max<-append(theorical_max,maximum)
  rangeC<-(dataset[[i,10]]-dataset[[i,9]])/(maximum-minimum)
  
  if (dataset[[i,10]]>maximum | dataset[[i,9]]<minimum){
    rangeC=NA
  }
  if (maximum==minimum){
    rangeC<-NA
  }
  rangeCoverage<-append(rangeCoverage,rangeC)
}



dataset<-as_tibble(cbind(dataset,theorical_min,theorical_max,rangeCoverage))
