View(lim_urban$A)
View(lim_urban$G)
G<-lim_urban$G
g=c()
for (i in 1:302){
g=c(g,sum(G[i,]))
}
?which
which(g!=1 | g!= -1)
which(g!=1 & g!= -1)
?count
g=c()
for (i in 1:302){
f=0
for (j in 1:69){
if(G[i,j]!=0){
f=f+1
}
}
g=c(g,f)
}
which(g!=1)
View(bowf_bench_corrected)
load("/media/theo/TOSHIBA EXT/PostDoc_Nestore/WorkInProgress/XP_JMB/BOWF_jump_resume.Rdata")
View(BOWF_jump_resume)
ranges<-lim_ranges(lim)
View(ranges)
UseMethod("cov")
UseMethod(cov)
cov
?cov
library(samplelim)
setwd("/media/theo/TOSHIBA EXT/PostDoc_Nestore/packages/samplelim/samplelim/R")
setwd("/media/theo/TOSHIBA EXT/PostDoc_Nestore/WorkInProgress/XP_JMB")
metabolic_net_2_matrix <- function(path) {
modelmat = R.matlab::readMat(path)
modelmat = modelmat[1]
modelmat = modelmat[[1]]
el = 11
if(dim(modelmat[[11]])[1] > dim(modelmat[[11]])[2]) {
el = el -1
}
A = modelmat[[el]]
#Aeq=matrix(Aeq,ncol = ncol(Aeq), nrow = nrow(Aeq))
lb = as.vector(modelmat[[el+1]])
ub = as.vector(modelmat[[el+2]])
b = as.vector(modelmat[[el+3]])
obj = as.vector(modelmat[[el+4]])
d = dim(A)[2]
G = rbind(diag(d), -diag(d))
h = c(ub, -lb)
HP = list(G = -G, H = -h, A = A, B= b)
return(HP)
}
path = 'modeles/e_coli_core.mat'
lim_ecoli<-metabolic_net_2_matrix(path)
ecoli_ranges<-lim_ranges(lim_ecoli)
View(ecoli_ranges)
sample<-rlim(lim_ecoli)
View(sample)
View(lim_ecoli)
ranges_ecoli<-lim_ranges(lim_ecoli)
View(ranges_ecoli)
ranges_pol<-poly_ranges(G=lim_ecoli$G,H=lim_ecoli$H)
View(ranges_pol)
A<-read.csv(file="modeles/ecoli_A.csv",header=FALSE)
b<-read.csv(file="modeles/ecoli_b.csv",header=FALSE)
P=Hpolytope(A=A,b=b)
A<-matrix(A)
View(A)
A<-read.csv(file="modeles/ecoli_A.csv",header=FALSE)
A<-as.matrix(A)
b<-as.numeric(b)
View(b)
b<-as.numeric(b["V1"])
b<-as.numeric(b[["V1"]])
P=Hpolytope(A=A,b=b)
inner_ball(P)
ranges_G<-poly_ranges(G=lim_ecoli$G,H=lim_ecoli$H)
View(ranges_G)
View(ranges_ecoli)
View(ranges_ecoli)
lim_ecoli$G[c(50,51),]
add_eq<-matrix(data=0,nrow = 2,ncol=95)
ii=c(50,51)
for (iseq in ii) { # if they exist: add regular equalities !
add_eq<-rep(0,95)
add_eq[iseq]<-1
A  <- rbind(A,add_eq)
B  <- c(B,xv[iseq,1])
}
library(samplelim)
red_pol_ecoli<-lim_full_dim_poly(lim_ecoli)
View(red_pol_ecoli)
P<-Hpolytope(A=-red_pol_ecoli$G,b=-red_pol_ecoli$H)
inner_ball(P)
sample<-rlim(lim_ecoli)
View(sample)
View(ranges_ecoli)
library(samplelim)
setwd("/media/theo/TOSHIBA EXT/PostDoc_Nestore/WorkInProgress/XP_JMB")
lim<-df_to_lim("modeles"DF_urban.txt)
lim<-df_to_lim("modeles/DF_urban.txt")
load("/media/theo/TOSHIBA EXT/PostDoc_Nestore/WorkInProgress/XP_JMB/echantillons/urban_jump_summarised.Rdata")
View(urban_jump_summarised)
library(volesti)
install.packages("volesti")
library(volesti)
library(samplelim)
volesti_rpol <- function(A=NULL,B=NULL,G=NULL,H=NULL, W=1, iter=3000, jmp=NULL, x0=NULL){
automatedjump <- function(G,H,scale=10)   {
ranges<-poly_ranges(G=G,H=H)[,3]
return(ranges/scale)
}
## conversions vectors to matrices and checks
if (is.data.frame(A)) A <- as.matrix(A)
if (is.data.frame(G)) G <- as.matrix(G)
if (is.vector(A)) A <- t(A)
if (is.vector(G)) G <- t(G)
if(is.null(G)){
stop("G is null, the polytope is not defined")
}
## full dimensionnal polytope
if(is.null(A)){
x0<-0
Z<-diag(ncol(G))
g=G
h=as.numeric(H)
}else{
full_pol <-full_dim_poly(A,B,G,H)
x0<-full_pol$x0
Z<-full_pol$Z
g=full_pol$G
h=as.numeric(full_pol$H)
}
P <- Hpolytope(A = -g, b = -h)
#exploration
if (is.null(jmp)) {
random_walk <- list("walk"="BiW")
}else{
random_walk <- list("walk"="BiW",L=jmp)
}
res_redspace<-as.matrix(volesti::sample_points(P,n=W*iter,random_walk = random_walk))
res<-x0+Z%*%res_redspace
x<-t(res)
x<-x[c(1:iter)*W,]
xnames <- colnames(A)
if (is.null(xnames)) xnames <- colnames(G)
colnames (x) <- xnames
return(x)
}
volesti_rlim<- function(lim, W=1, iter=3000, jmp=NULL,
tol=sqrt(.Machine$double.eps), x0=NULL){
return(volesti_rpol(A=lim$A,B=lim$B,G=lim$G,H=lim$H, W=W, iter=iter, jmp=jmp, x0=x0))   }
sample<-volesti_rlim(lim,iter=1000,jmp=1e+07)
test=data.frame(min=double(),max=double())
View(sample)
?min
minimum=c()
for (i in 1:69){
minimum=c(minimum,min(sample[[,i]]))
}
for (i in 1:69){
minimum=c(minimum,min(sample[,i]))
}
maximum=c()
for (i in 1:69){
minimum=c(minimum,min(sample[[,i]]))
}
for (i in 1:69){
maximum=c(maximum,max(sample[,i]))
}
test<-test%>%mutate(min=minimum,max=maximum)
library(tidyverse)
test<-test%>%mutate(min=minimum,max=maximum)
View(test)
test=data.frame(min=minimum,max=maximum)
theorical_ranges<-lim_ranges(lim)
View(theorical_ranges)
test<-cbind(test,theorical_ranges)
View(test)
test<-test%>%mutate(test=(min>=min.1 & max <=max.1))
test=data.frame(min_emp=minimum,max_emp=maximum)
test<-cbind(test,theorical_ranges)
test<-test%>%mutate(test=(min_emp>=min & max_emp <=max))
red_pol<-lim_full_dim_poly(lim)
P<-Hpolytope(A=-red_pol$G,b=-red_pol$H)
inner_ball(P)
range_red_pol<-poly_ranges(G=red_pol$G,H=red_pol$H)
View(range_red_pol)
x0<-inner_ball(P)[-54]
test<-cbind(theorical_ranges,x0)
test<-cbind(range_red_pol,x0)
test<- test%>% mutate(test=(x0>=min & x0<=max))
test=as.data.frame(test)
test<- test%>% mutate(test=(x0>=min & x0<=max))
library(samplelim)
library(volesti)
detach("package:samplelim", unload = TRUE)
library(samplelim)
volesti_rpol <- function(A=NULL,B=NULL,G=NULL,H=NULL, W=1, iter=3000, jmp=NULL, x0=NULL){
automatedjump <- function(G,H,scale=10)   {
ranges<-poly_ranges(G=G,H=H)[,3]
return(ranges/scale)
}
## conversions vectors to matrices and checks
if (is.data.frame(A)) A <- as.matrix(A)
if (is.data.frame(G)) G <- as.matrix(G)
if (is.vector(A)) A <- t(A)
if (is.vector(G)) G <- t(G)
if(is.null(G)){
stop("G is null, the polytope is not defined")
}
## full dimensionnal polytope
if(is.null(A)){
x0<-0
Z<-diag(ncol(G))
g=G
h=as.numeric(H)
}else{
full_pol <-full_dim_poly(A,B,G,H)
x0<-full_pol$x0
Z<-full_pol$Z
g=full_pol$G
h=as.numeric(full_pol$H)
}
P <- Hpolytope(A = -g, b = -h)
#exploration
if (is.null(jmp)) {
random_walk <- list("walk"="BiW")
}else{
random_walk <- list("walk"="BiW",L=jmp)
}
res_redspace<-as.matrix(volesti::sample_points(P,n=W*iter,random_walk = random_walk))
res<-x0+Z%*%res_redspace
x<-t(res)
x<-x[c(1:iter)*W,]
xnames <- colnames(A)
if (is.null(xnames)) xnames <- colnames(G)
colnames (x) <- xnames
return(x)
}
volesti_rlim<- function(lim, W=1, iter=3000, jmp=NULL,
tol=sqrt(.Machine$double.eps), x0=NULL){
return(volesti_rpol(A=lim$A,B=lim$B,G=lim$G,H=lim$H, W=W, iter=iter, jmp=jmp, x0=x0))   }
setwd("/media/theo/TOSHIBA EXT/PostDoc_Nestore/WorkInProgress/XP_JMB")
lim<-df_to_lim("modele/DF_urban.txt")
lim<-df_to_lim("modeles/DF_urban.txt")
theorical_ranges<-lim_ranges(lim)
red_pol<-lim_full_dim_poly(lim)
ranges_red_pol<-poly_ranges(G=red_pol$G,H=red_pol$H)
P<-Hpolytope(A=-red_pol$G,b=-red_pol$H)
sample<-volesti_rpol(G=red_pol$G,H=red_pol$H,iter=100,jmp=100)
View(sample)
sample<-volesti_rpol(G=red_pol$G,H=red_pol$H,iter=100,jmp=1e+08)
sample<-volesti_rpol(G=red_pol$G,H=red_pol$H,iter=1000,jmp=1e+08)
minimum=c()
maximum=c()
for (i in 1:53){
minimum=c(minimum,min(sample[,i]))
maximum=c(maximum,max(sample[,i]))
}
library(tidyverse)
test<-as_tibble(cbind(ranges_red_pol,minimum,maximum))
View(test)
test <- test%>%mutate(test=(minimum>=min & maximum <=max))
sample2<-rpol(G=red_pol$G,H=red_pol$H,iter=1000,jmp=1e+08)
load("/media/theo/TOSHIBA EXT/PostDoc_Nestore/WorkInProgress/XP_JMB/echantillons/urban_jump_summarised.Rdata")
minimum=c()
maximum=c()
for (i in 1:53){
minimum=c(minimum,min(sample2[,i]))
maximum=c(maximum,max(sample2[,i]))
}
test2<-as_tibble(cbind(ranges_red_pol,minimum,maximum))
test <- test%>%mutate(test=(minimum>=min & maximum <=max))
test2 <- test2%>%mutate(test=(minimum>=min & maximum <=max))
View(test2)
View(urban_jump_summarised)
load("/media/theo/TOSHIBA EXT/PostDoc_Nestore/WorkInProgress/XP_JMB/echantillons/urban_summarised.Rdata")
View(urban_summarised)
lim_bowf<-df_to_lim("modeles/DeclarationFileBOWF.txt")
bowf_ranges<-lim_ranges(lim_bowf)
bowf_red<-lim_full_dim_poly(lim_bowf)
bowf_red_ranges<-poly_ranges(G=bowf_red$G,H=bowf_red$H)
min(bowf_ranges[,3])
max(bowf_ranges[,3])
View(bowf_ranges)
View(lim)
View(lim_bowf)
View(bowf_red)
min(bowf_red_ranges[,3])
max(bowf_red_ranges[,3])
P=Hpolytope(A=-bowf_red$G,b=-bowf_red$H)
inner_ball(P)
P=Hpolytope(A=-red_pol$G,b=-red_pol$H)
inner_ball(P)
View(urban_jump_summarised)
library(xtable)
xtable(urban_summarised)
load("/media/theo/TOSHIBA EXT/PostDoc_Nestore/WorkInProgress/XP_JMB/real_data_diag_final.Rdata")
View(real_data_diag)
dataset<-real_data_diag %>% filter(algo=="Mirror" & modele=="urban")
View(dataset)
summarised<-dataset %>% mutate(fluxIndex=as.numeric(fluxIndex))%>%
mutate(time=as.numeric(time),Geweke=as.numeric(Geweke),ESS=as.numeric(ESS),RL_M=as.numeric(RL_M),RL_N=as.numeric(RL_N),RL_Nmin=as.numeric(RL_Nmin),RL_I=as.numeric(RL_I),RL_k=as.numeric(RL_k),rangeCoverage=as.numeric(rangeCoverage)) %>%
mutate(Geweke_test=as.numeric(abs(Geweke)>1.28)) %>%
group_by(algo,jmp_type,jmp,fluxIndex) %>%
mutate(time=mean(time),G=sum(Geweke_test,na.rm = TRUE),RL_M=mean(RL_M,na.rm=TRUE),RL_N=mean(RL_N,na.rm=TRUE),RL_Nmin=mean(RL_Nmin,na.rm=TRUE),RL_k=mean(RL_k,na.rm=TRUE),RL_I=round(mean(RL_I,na.rm=TRUE)),ESSmean=round(mean(ESS,na.rm=TRUE)),meanRC=round(mean(rangeCoverage,na.rm=TRUE),digits=5)) %>%
subset(select=c("algo","jmp_type","jmp","time","fluxIndex","G","RL_M","RL_N","RL_k","RL_I","ESSmean","meanRC")) %>%
distinct()#%>%
dataset <- dataset %>% mutate(time=NA)
summarised<-dataset %>% mutate(fluxIndex=as.numeric(fluxIndex))%>%
mutate(time=as.numeric(time),Geweke=as.numeric(Geweke),ESS=as.numeric(ESS),RL_M=as.numeric(RL_M),RL_N=as.numeric(RL_N),RL_Nmin=as.numeric(RL_Nmin),RL_I=as.numeric(RL_I),RL_k=as.numeric(RL_k),rangeCoverage=as.numeric(rangeCoverage)) %>%
mutate(Geweke_test=as.numeric(abs(Geweke)>1.28)) %>%
group_by(algo,jmp_type,jmp,fluxIndex) %>%
mutate(time=mean(time),G=sum(Geweke_test,na.rm = TRUE),RL_M=mean(RL_M,na.rm=TRUE),RL_N=mean(RL_N,na.rm=TRUE),RL_Nmin=mean(RL_Nmin,na.rm=TRUE),RL_k=mean(RL_k,na.rm=TRUE),RL_I=round(mean(RL_I,na.rm=TRUE)),ESSmean=round(mean(ESS,na.rm=TRUE)),meanRC=round(mean(rangeCoverage,na.rm=TRUE),digits=5)) %>%
subset(select=c("algo","jmp_type","jmp","time","fluxIndex","G","RL_M","RL_N","RL_k","RL_I","ESSmean","meanRC")) %>%
distinct()#%>%
summarised<-dataset %>% mutate(fluxIndex=as.numeric(fluxIndex))%>%
mutate(time=as.numeric(time),Geweke=as.numeric(Geweke),ESS=as.numeric(ESS),RL_M=as.numeric(RL_M),RL_N=as.numeric(RL_N),RL_Nmin=as.numeric(RL_Nmin),RL_I=as.numeric(RL_I),RL_k=as.numeric(RL_k),rangeCoverage=as.numeric(rangeCoverage)) %>%
mutate(Geweke_test=as.numeric(abs(Geweke)>1.28)) %>%
group_by(algo,fluxIndex) %>%
mutate(time=mean(time),G=sum(Geweke_test,na.rm = TRUE),RL_M=mean(RL_M,na.rm=TRUE),RL_N=mean(RL_N,na.rm=TRUE),RL_Nmin=mean(RL_Nmin,na.rm=TRUE),RL_k=mean(RL_k,na.rm=TRUE),RL_I=round(mean(RL_I,na.rm=TRUE)),ESSmean=round(mean(ESS,na.rm=TRUE)),meanRC=round(mean(rangeCoverage,na.rm=TRUE),digits=5)) %>%
subset(select=c("algo",,"fluxIndex","G","RL_M","RL_N","RL_k","RL_I","ESSmean","meanRC")) %>%
distinct()#%>%
summarised<-dataset %>% mutate(fluxIndex=as.numeric(fluxIndex))%>%
mutate(time=as.numeric(time),Geweke=as.numeric(Geweke),ESS=as.numeric(ESS),RL_M=as.numeric(RL_M),RL_N=as.numeric(RL_N),RL_Nmin=as.numeric(RL_Nmin),RL_I=as.numeric(RL_I),RL_k=as.numeric(RL_k),rangeCoverage=as.numeric(rangeCoverage)) %>%
mutate(Geweke_test=as.numeric(abs(Geweke)>1.28)) %>%
group_by(algo,fluxIndex) %>%
mutate(time=mean(time),G=sum(Geweke_test,na.rm = TRUE),RL_M=mean(RL_M,na.rm=TRUE),RL_N=mean(RL_N,na.rm=TRUE),RL_Nmin=mean(RL_Nmin,na.rm=TRUE),RL_k=mean(RL_k,na.rm=TRUE),RL_I=round(mean(RL_I,na.rm=TRUE)),ESSmean=round(mean(ESS,na.rm=TRUE)),meanRC=round(mean(rangeCoverage,na.rm=TRUE),digits=5)) %>%
subset(select=c("algo","fluxIndex","G","RL_M","RL_N","RL_k","RL_I","ESSmean","meanRC")) %>%
distinct()#%>%
View(summarised)
summarised<-dataset %>% mutate(fluxIndex=as.numeric(fluxIndex))%>%
mutate(time=as.numeric(time),Geweke=as.numeric(Geweke),ESS=as.numeric(ESS),RL_M=as.numeric(RL_M),RL_N=as.numeric(RL_N),RL_Nmin=as.numeric(RL_Nmin),RL_I=as.numeric(RL_I),RL_k=as.numeric(RL_k),rangeCoverage=as.numeric(rangeCoverage)) %>%
mutate(Geweke_test=as.numeric(abs(Geweke)>1.28)) %>%
group_by(algo,fluxIndex) %>%
mutate(time=mean(time),G=sum(Geweke_test,na.rm = TRUE),RL_M=mean(RL_M,na.rm=TRUE),RL_N=mean(RL_N,na.rm=TRUE),RL_Nmin=mean(RL_Nmin,na.rm=TRUE),RL_k=mean(RL_k,na.rm=TRUE),RL_I=round(mean(RL_I,na.rm=TRUE)),ESSmean=round(mean(ESS,na.rm=TRUE)),meanRC=round(mean(rangeCoverage,na.rm=TRUE),digits=5)) %>%
subset(select=c("algo","fluxIndex","G","RL_M","RL_N","RL_k","RL_I","ESSmean","meanRC")) %>%
distinct()%>%
group_by(algo,jmp_type,jmp) %>%
mutate(time=mean(time),G=mean(G,na.rm = TRUE),RL_M=max(RL_M,na.rm=TRUE),RL_N=max(RL_N,na.rm=TRUE),RL_k=max(RL_k,na.rm=TRUE),RL_I=round(mean(RL_I,na.rm=TRUE)),ESSmean=round(mean(ESSmean,na.rm=TRUE)),meanRC=round(mean(meanRC,na.rm=TRUE),digits=5)) %>%
subset(select=c("algo","G","RL_M","RL_N","RL_k","RL_I","ESSmean","meanRC")) %>%
distinct()
summarised<-dataset %>% mutate(fluxIndex=as.numeric(fluxIndex))%>%
mutate(time=as.numeric(time),Geweke=as.numeric(Geweke),ESS=as.numeric(ESS),RL_M=as.numeric(RL_M),RL_N=as.numeric(RL_N),RL_Nmin=as.numeric(RL_Nmin),RL_I=as.numeric(RL_I),RL_k=as.numeric(RL_k),rangeCoverage=as.numeric(rangeCoverage)) %>%
mutate(Geweke_test=as.numeric(abs(Geweke)>1.28)) %>%
group_by(algo,fluxIndex) %>%
mutate(time=mean(time),G=sum(Geweke_test,na.rm = TRUE),RL_M=mean(RL_M,na.rm=TRUE),RL_N=mean(RL_N,na.rm=TRUE),RL_Nmin=mean(RL_Nmin,na.rm=TRUE),RL_k=mean(RL_k,na.rm=TRUE),RL_I=round(mean(RL_I,na.rm=TRUE)),ESSmean=round(mean(ESS,na.rm=TRUE)),meanRC=round(mean(rangeCoverage,na.rm=TRUE),digits=5)) %>%
subset(select=c("algo","fluxIndex","G","RL_M","RL_N","RL_k","RL_I","ESSmean","meanRC")) %>%
distinct()%>%
group_by(algo) %>%
mutate(time=mean(time),G=mean(G,na.rm = TRUE),RL_M=max(RL_M,na.rm=TRUE),RL_N=max(RL_N,na.rm=TRUE),RL_k=max(RL_k,na.rm=TRUE),RL_I=round(mean(RL_I,na.rm=TRUE)),ESSmean=round(mean(ESSmean,na.rm=TRUE)),meanRC=round(mean(meanRC,na.rm=TRUE),digits=5)) %>%
subset(select=c("algo","G","RL_M","RL_N","RL_k","RL_I","ESSmean","meanRC")) %>%
distinct()
summarised<-dataset %>% mutate(fluxIndex=as.numeric(fluxIndex))%>%
mutate(time=as.numeric(time),Geweke=as.numeric(Geweke),ESS=as.numeric(ESS),RL_M=as.numeric(RL_M),RL_N=as.numeric(RL_N),RL_Nmin=as.numeric(RL_Nmin),RL_I=as.numeric(RL_I),RL_k=as.numeric(RL_k),rangeCoverage=as.numeric(rangeCoverage)) %>%
mutate(Geweke_test=as.numeric(abs(Geweke)>1.28)) %>%
group_by(algo,fluxIndex) %>%
mutate(time=mean(time),G=sum(Geweke_test,na.rm = TRUE),RL_M=mean(RL_M,na.rm=TRUE),RL_N=mean(RL_N,na.rm=TRUE),RL_Nmin=mean(RL_Nmin,na.rm=TRUE),RL_k=mean(RL_k,na.rm=TRUE),RL_I=round(mean(RL_I,na.rm=TRUE)),ESSmean=round(mean(ESS,na.rm=TRUE)),meanRC=round(mean(rangeCoverage,na.rm=TRUE),digits=5)) %>%
subset(select=c("algo","fluxIndex","G","RL_M","RL_N","RL_k","RL_I","ESSmean","meanRC")) %>%
distinct()%>%
group_by(algo) %>%
mutate(G=mean(G,na.rm = TRUE),RL_M=max(RL_M,na.rm=TRUE),RL_N=max(RL_N,na.rm=TRUE),RL_k=max(RL_k,na.rm=TRUE),RL_I=round(mean(RL_I,na.rm=TRUE)),ESSmean=round(mean(ESSmean,na.rm=TRUE)),meanRC=round(mean(meanRC,na.rm=TRUE),digits=5)) %>%
subset(select=c("algo","G","RL_M","RL_N","RL_k","RL_I","ESSmean","meanRC")) %>%
distinct()
View(summarised)
View(summarised)
View(summarised)
load("/media/theo/TOSHIBA EXT/PostDoc_Nestore/WorkInProgress/XP_JMB/echantillons/bowf_dataset.Rdata")
dataset<-bowf_dataset_corrected
summarised<-dataset %>% mutate(fluxIndex=as.numeric(fluxIndex))%>%
mutate(time=as.numeric(time),Geweke=as.numeric(Geweke),ESS=as.numeric(ESS),RL_M=as.numeric(RL_M),RL_N=as.numeric(RL_N),RL_Nmin=as.numeric(RL_Nmin),RL_I=as.numeric(RL_I),RL_k=as.numeric(RL_k),rangeCoverage=as.numeric(rangeCoverage)) %>%
mutate(Geweke_test=as.numeric(abs(Geweke)>1.28)) %>%
group_by(algo,jmp_type,jmp,fluxIndex) %>%
mutate(time=mean(time),G=sum(Geweke_test,na.rm = TRUE),RL_M=mean(RL_M,na.rm=TRUE),RL_N=mean(RL_N,na.rm=TRUE),RL_Nmin=mean(RL_Nmin,na.rm=TRUE),RL_k=mean(RL_k,na.rm=TRUE),RL_I=round(mean(RL_I,na.rm=TRUE)),ESSmean=round(mean(ESS,na.rm=TRUE)),meanRC=round(mean(rangeCoverage,na.rm=TRUE),digits=5)) %>%
subset(select=c("algo","fluxIndex","G","RL_M","RL_N","RL_k","RL_I","ESSmean","meanRC")) %>%
distinct()%>%
group_by(algo,jmp_type,jmp) %>%
mutate(G=mean(G,na.rm = TRUE),RL_M=max(RL_M,na.rm=TRUE),RL_N=max(RL_N,na.rm=TRUE),RL_k=max(RL_k,na.rm=TRUE),RL_I=round(mean(RL_I,na.rm=TRUE)),ESSmean=round(mean(ESSmean,na.rm=TRUE)),meanRC=round(mean(meanRC,na.rm=TRUE),digits=5)) %>%
subset(select=c("algo","jmp_type","jmp","G","RL_M","RL_N","RL_k","RL_I","ESSmean","meanRC")) %>%
distinct()
summarised<-dataset %>% mutate(fluxIndex=as.numeric(fluxIndex))%>%
mutate(time=as.numeric(time),Geweke=as.numeric(Geweke),ESS=as.numeric(ESS),RL_M=as.numeric(RL_M),RL_N=as.numeric(RL_N),RL_Nmin=as.numeric(RL_Nmin),RL_I=as.numeric(RL_I),RL_k=as.numeric(RL_k),rangeCoverage=as.numeric(rangeCoverage)) %>%
mutate(Geweke_test=as.numeric(abs(Geweke)>1.28)) %>%
group_by(algo,jmp_type,jmp,fluxIndex) %>%
mutate(time=mean(time),G=sum(Geweke_test,na.rm = TRUE),RL_M=mean(RL_M,na.rm=TRUE),RL_N=mean(RL_N,na.rm=TRUE),RL_Nmin=mean(RL_Nmin,na.rm=TRUE),RL_k=mean(RL_k,na.rm=TRUE),RL_I=round(mean(RL_I,na.rm=TRUE)),ESSmean=round(mean(ESS,na.rm=TRUE)),meanRC=round(mean(rangeCoverage,na.rm=TRUE),digits=5)) %>%
subset(select=c("algo","fluxIndex","G","RL_M","RL_N","RL_k","RL_I","ESSmean","meanRC")) %>%
group_by(algo,jmp_type,jmp) %>%
mutate(G=mean(G,na.rm = TRUE),RL_M=max(RL_M,na.rm=TRUE),RL_N=max(RL_N,na.rm=TRUE),RL_k=max(RL_k,na.rm=TRUE),RL_I=round(mean(RL_I,na.rm=TRUE)),ESSmean=round(mean(ESSmean,na.rm=TRUE)),meanRC=round(mean(meanRC,na.rm=TRUE),digits=5)) %>%
subset(select=c("algo","jmp_type","jmp","G","RL_M","RL_N","RL_k","RL_I","ESSmean","meanRC")) %>%
distinct()
summarised<-dataset %>% mutate(fluxIndex=as.numeric(fluxIndex))%>%
mutate(time=as.numeric(time),Geweke=as.numeric(Geweke),ESS=as.numeric(ESS),RL_M=as.numeric(RL_M),RL_N=as.numeric(RL_N),RL_Nmin=as.numeric(RL_Nmin),RL_I=as.numeric(RL_I),RL_k=as.numeric(RL_k),rangeCoverage=as.numeric(rangeCoverage)) %>%
mutate(Geweke_test=as.numeric(abs(Geweke)>1.28)) %>%
group_by(algo,jmp_type,jmp,fluxIndex) %>%
mutate(time=mean(time),G=sum(Geweke_test,na.rm = TRUE),RL_M=mean(RL_M,na.rm=TRUE),RL_N=mean(RL_N,na.rm=TRUE),RL_Nmin=mean(RL_Nmin,na.rm=TRUE),RL_k=mean(RL_k,na.rm=TRUE),RL_I=round(mean(RL_I,na.rm=TRUE)),ESSmean=round(mean(ESS,na.rm=TRUE)),meanRC=round(mean(rangeCoverage,na.rm=TRUE),digits=5)) %>%
group_by(algo,jmp_type,jmp) %>%
mutate(G=mean(G,na.rm = TRUE),RL_M=max(RL_M,na.rm=TRUE),RL_N=max(RL_N,na.rm=TRUE),RL_k=max(RL_k,na.rm=TRUE),RL_I=round(mean(RL_I,na.rm=TRUE)),ESSmean=round(mean(ESSmean,na.rm=TRUE)),meanRC=round(mean(meanRC,na.rm=TRUE),digits=5)) %>%
subset(select=c("algo","jmp_type","jmp","G","RL_M","RL_N","RL_k","RL_I","ESSmean","meanRC")) %>%
distinct()
dataset<-as_tibble(dataset)
summarised<-dataset %>% mutate(fluxIndex=as.numeric(fluxIndex))%>%
mutate(time=as.numeric(time),Geweke=as.numeric(Geweke),ESS=as.numeric(ESS),RL_M=as.numeric(RL_M),RL_N=as.numeric(RL_N),RL_Nmin=as.numeric(RL_Nmin),RL_I=as.numeric(RL_I),RL_k=as.numeric(RL_k),rangeCoverage=as.numeric(rangeCoverage)) %>%
mutate(Geweke_test=as.numeric(abs(Geweke)>1.28)) %>%
group_by(algo,jmp_type,jmp,fluxIndex) %>%
mutate(time=mean(time),G=sum(Geweke_test,na.rm = TRUE),RL_M=mean(RL_M,na.rm=TRUE),RL_N=mean(RL_N,na.rm=TRUE),RL_Nmin=mean(RL_Nmin,na.rm=TRUE),RL_k=mean(RL_k,na.rm=TRUE),RL_I=round(mean(RL_I,na.rm=TRUE)),ESSmean=round(mean(ESS,na.rm=TRUE)),meanRC=round(mean(rangeCoverage,na.rm=TRUE),digits=5)) %>%
group_by(algo,jmp_type,jmp) %>%
mutate(G=mean(G,na.rm = TRUE),RL_M=max(RL_M,na.rm=TRUE),RL_N=max(RL_N,na.rm=TRUE),RL_k=max(RL_k,na.rm=TRUE),RL_I=round(mean(RL_I,na.rm=TRUE)),ESSmean=round(mean(ESSmean,na.rm=TRUE)),meanRC=round(mean(meanRC,na.rm=TRUE),digits=5)) %>%
subset(select=c("algo","jmp_type","jmp","G","RL_M","RL_N","RL_k","RL_I","ESSmean","meanRC")) %>%
distinct()
View(summarised)
xtable(summarised)
sample_urban_60000<-read_csv(file="echantillons/urban/urban_rlim_20000_jump__fixe_60000_2.csv",header=TRUE)[,2:70]
sample_urban_60000<-read_csv(file="echantillons/urban/urban_rlim_20000_jump__fixe_60000_2.csv")[,2:70]
View(sample_urban_60000)
library(GGally)
ggpairs(sample_urban_60000,columns=1:5, lower=list(continuous=wrap("points",alpha=0.3,size=0.1),combo=wrap("dot",alpha=0.4,size=0.2)),title =paste(filename,"Volesti"))
ggpairs(sample_urban_60000,columns=1:5, lower=list(continuous=wrap("points",alpha=0.3,size=0.1),combo=wrap("dot",alpha=0.4,size=0.2)))
sample_urban_auto<-read_csv(file="echantillons/urban/_urban_Mirror_20000_2 .csv")[,2:70]
ggpairs(sample_urban_auto,columns=1:5, lower=list(continuous=wrap("points",alpha=0.3,size=0.1),combo=wrap("dot",alpha=0.4,size=0.2)))
View(lim)
ggpairs(sample_urban_auto,columns=1:7, lower=list(continuous=wrap("points",alpha=0.3,size=0.1),combo=wrap("dot",alpha=0.4,size=0.2)))
ggpairs(sample_urban_auto,columns=1:20, lower=list(continuous=wrap("points",alpha=0.3,size=0.1),combo=wrap("dot",alpha=0.4,size=0.2)))
ggpairs(sample_urban_60000,columns=1:20, lower=list(continuous=wrap("points",alpha=0.3,size=0.1),combo=wrap("dot",alpha=0.4,size=0.2)))
sample_biw_1e07<-read_csv(file="echantillons/urban/_urban_biw_20000_jump_fixe_1e+07_7.csv")[,2:70]
sample_biw_1e07<-read_csv(file="echantillons/urban/urban_biw_20000_jump_fixe_1e+07_7.csv")[,2:70]
ggpairs(sample_biw_1e07,columns=1:20, lower=list(continuous=wrap("points",alpha=0.3,size=0.1),combo=wrap("dot",alpha=0.4,size=0.2)))
sample_biw_1e06<-read_csv(file="echantillons/urban/urban_biw_20000_jump_fixe_1e+06_7.csv")[,2:70]
ggpairs(sample_biw_1e06,columns=1:20, lower=list(continuous=wrap("points",alpha=0.3,size=0.1),combo=wrap("dot",alpha=0.4,size=0.2)))
sample_rlim_2e5<-read_csv(file="echantillons/urban/urban_rlim_20000_jump_fixe__2e+05_7.csv")[,2:70]
sample_rlim_2e5<-read_csv(file="echantillons/urban/urban_rlim_20000_jump__fixe_2e+05_7.csv")[,2:70]
ggpairs(sample_rlim_2e5,columns=1:20, lower=list(continuous=wrap("points",alpha=0.3,size=0.1),combo=wrap("dot",alpha=0.4,size=0.2)))
setwd("/media/theo/TOSHIBA EXT/PostDoc_Nestore/WorkInProgress/XP_JMB")
load("/media/theo/TOSHIBA EXT/PostDoc_Nestore/WorkInProgress/XP_JMB/echantillons/ecoli_summarised.Rdata")
library(xtable)
View(ecoli_summarised)
xtable(ecoli_summarised,digits=c(0,0,0,1,3,2,1,1,1,2,0,5))
library(tidyverse)
ecoli_summarised<-ecoli_summarised %>% subset(select=c("algo","jmp_type","jmp","time","RL_M","RL_N","RL_k","RL_I","G","ESSmean","meanRC"))
xtable(ecoli_summarised,digits=c(0,0,0,1,3,2,1,1,1,2,0,5))
library(samplelim)
source("/media/theo/TOSHIBA EXT/PostDoc_Nestore/WorkInProgress/XP_JMB/metabolic_net_2_matrix.R", echo=TRUE)
red_pol<-lim_full_dim_poly(lim_ecoli)
P<-Hpolytope(A=-red_pol$G,b=-red_pol$H)
inner_ball(P)
sample<-read.csv("ecoli_chrr_1.csv",header=FALSE)
sample<-read.csv("echantillons/ecoli/ecoli_chrr_1.csv",header=FALSE)
sample<-as.data.frame(t(sample))
sample2<-read.csv("echantillons/ecoli/ecoli_biw_20000_jump_fixe_1000_1.csv",header=TRUE)
sample2<-sample2[,2:96]
sample2<-read.csv("echantillons/ecoli/ecoli_rlim_20000_jump_fixe_100_1.csv",header=TRUE)[,2:96
]
sample3<-read.csv("echantillons/ecoli/ecoli_biw_20000_jump_fixe_1000_1.csv",header=TRUE)[,2:96]
library("GGally")
ggpairs(sample1,columns=1:7, lower=list(continuous=wrap("points",alpha=0.3,size=0.1),combo=wrap("dot",alpha=0.4,size=0.2)),title =paste("SampleLIM"))
ggpairs(sample,columns=1:7, lower=list(continuous=wrap("points",alpha=0.3,size=0.1),combo=wrap("dot",alpha=0.4,size=0.2)),title =paste("SampleLIM"))
ggpairs(sample,columns=1:7, lower=list(continuous=wrap("points",alpha=0.3,size=0.1),combo=wrap("dot",alpha=0.4,size=0.2)),title =paste("CHRR ecoli"))
ggpairs(sample,columns=1:10, lower=list(continuous=wrap("points",alpha=0.3,size=0.1),combo=wrap("dot",alpha=0.4,size=0.2)),title =paste("CHRR ecoli"))
ggpairs(sample2,columns=1:10, lower=list(continuous=wrap("points",alpha=0.3,size=0.1),combo=wrap("dot",alpha=0.4,size=0.2)),title =paste("rlim ecoli"))
ggpairs(sample3,columns=1:10, lower=list(continuous=wrap("points",alpha=0.3,size=0.1),combo=wrap("dot",alpha=0.4,size=0.2)),title =paste("sample_points ecoli"))
ggpairs(sample2,columns=1:20, lower=list(continuous=wrap("points",alpha=0.3,size=0.1),combo=wrap("dot",alpha=0.4,size=0.2)),title =paste("rlim ecoli"))
library(samplelim)
setwd("/media/theo/TOSHIBA EXT/PostDoc_Nestore/WorkInProgress/XP_JMB")
lim<-df_to_lim("modeles/DF_urban.txt")
flow_ranges<-lim_ranges(lim)
View(flow_ranges)
minimum(flow_ranges$range)
min(flow_ranges$range)
min(flow_ranges[,3])
max(flow_ranges[,3])
red_pol<-lim_full_dim_poly(lim)
red_ranges<-poly_ranges(G=red_pol$G,H=red_pol$H)
min(red_range[,3])
min(red_ranges[,3])
max(red_ranges[,3])
metabolic_net_2_matrix <- function(path) {
modelmat = R.matlab::readMat(path)
modelmat = modelmat[1]
modelmat = modelmat[[1]]
el = 11
if(dim(modelmat[[11]])[1] > dim(modelmat[[11]])[2]) {
el = el -1
}
A = modelmat[[el]]
#Aeq=matrix(Aeq,ncol = ncol(Aeq), nrow = nrow(Aeq))
lb = as.vector(modelmat[[el+1]])
ub = as.vector(modelmat[[el+2]])
b = as.vector(modelmat[[el+3]])
obj = as.vector(modelmat[[el+4]])
d = dim(A)[2]
G = rbind(diag(d), -diag(d))
h = c(ub, -lb)
HP = list(G = -G, H = -h, A = A, B= b)
return(HP)
}
path = 'modeles/e_coli_core.mat'
lim_ecoli<-metabolic_net_2_matrix(path)
ranges_ecoli<-lim_ranges(lim_ecoli)
red_ecoli<-lim_full_dim_poly(lim_ecoli)
ranges_red_ecoli<-poly_ranges(G=red_ecoli$G,H=red_ecoli$H)
min(ranges_ecoli[,3])
max(ranges_ecoli[,3])
View(lim_ecoli)
min(ranges_red_ecoli[,3])
max(ranges_red_ecoli[,3])
?seq_len
seq_along(5)
seq_along(c(5,4,3,5,6,9))
seq_len(10)
seq_len(30)
