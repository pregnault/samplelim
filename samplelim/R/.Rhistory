library(Rglpk)
?Rglpk_solve_LP
test=rep("a",3)
test2=rep("b",3)
c(test,test2)
library(LIM)
poly_ranges <- function(A,B,G,H)   {
if (is.data.frame(A)) A <- as.matrix(A)
if (is.data.frame(G)) G <- as.matrix(G)
if (is.vector(A)) A <- t(A)
if (is.vector(G)) G <- t(G)
Nconstr<-nrow(G)
Neq<-nrow(A)
d<-ncol(G)
ranges<-matrix(nrow=d,ncol=3)
colnames(ranges)<-c("min","max","range")
constraints<-rbind(G,A)
constraints_direction<-c(rep(">=",Nconstr),rep("==",Neq))
bounds <- list(lower = list(ind = c(1:d), val = rep(-Inf,d)),
upper = list(ind = c(1:d), val = rep(Inf ,d)))
for (i in 1:d){
obj<-rep(0,d)
obj[i]=1
ranges[i,1]=Rglpk_solve_LP(obj=obj,mat=G,dir=ineq,rhs=h,bounds=bounds,max=FALSE)$optimum
ranges[i,2]=Rglpk_solve_LP(obj=obj,mat=G,dir=ineq,rhs=h,bounds=bounds,max=TRUE)$optimum
ranges[i,3]=ranges[i,2]-ranges[i,1]
}
return(ranges)
}
filename="DeclarationFileBOWF-short.txt"
web.lim<- Setup(filename)
poly_ranges(A=web.lim$A,B=web.lim$B,G=web.lim$G,H=web.lim$H)
poly_ranges <- function(A,B,G,H)   {
if (is.data.frame(A)) A <- as.matrix(A)
if (is.data.frame(G)) G <- as.matrix(G)
if (is.vector(A)) A <- t(A)
if (is.vector(G)) G <- t(G)
Nconstr<-nrow(G)
Neq<-nrow(A)
d<-ncol(G)
ranges<-matrix(nrow=d,ncol=3)
colnames(ranges)<-c("min","max","range")
constraints<-rbind(G,A)
rhs_vec<-c(H,B)
constraints_direction<-c(rep(">=",Nconstr),rep("==",Neq))
bounds <- list(lower = list(ind = c(1:d), val = rep(-Inf,d)),
upper = list(ind = c(1:d), val = rep(Inf ,d)))
for (i in 1:d){
obj<-rep(0,d)
obj[i]=1
ranges[i,1]=Rglpk_solve_LP(obj=obj,mat=constraints,dir=constraints_direction,rhs=rhs_vec,bounds=bounds,max=FALSE)$optimum
ranges[i,2]=Rglpk_solve_LP(obj=obj,mat=constraints,dir=constraints_direction,rhs=rhs_vec,bounds=bounds,max=TRUE)$optimum
ranges[i,3]=ranges[i,2]-ranges[i,1]
}
return(ranges)
}
poly_ranges(A=web.lim$A,B=web.lim$B,G=web.lim$G,H=web.lim$H)
poly_ranges <- function(A,B,G,H)   {
if (is.data.frame(A)) A <- as.matrix(A)
if (is.data.frame(G)) G <- as.matrix(G)
if (is.vector(A)) A <- t(A)
if (is.vector(G)) G <- t(G)
Nconstr<-nrow(G)
Neq<-nrow(A)
d<-ncol(G)
ranges<-matrix(nrow=d,ncol=3)
colnames(ranges)<-c("min","max","range")
constraints<-rbind(G,A)
rhs_vec<-c(H,B)
constraints_direction<-c(rep(">=",Nconstr),rep("==",Neq))
bounds <- list(lower = list(ind = c(1:d), val = rep(-Inf,d)),
upper = list(ind = c(1:d), val = rep(Inf ,d)))
for (i in 1:d){
obj<-rep(0,d)
obj[i]=1
ranges[i,1]=Rglpk_solve_LP(obj=obj,mat=constraints,dir=constraints_direction,rhs=rhs_vec,bounds=bounds,max=FALSE)$optimum
ranges[i,2]=Rglpk_solve_LP(obj=obj,mat=constraints,dir=constraints_direction,rhs=rhs_vec,bounds=bounds,max=TRUE)$optimum
ranges[i,3]=ranges[i,2]-ranges[i,1]
}
return(ranges)
}
lim_ranges<- function(lim){
return(poly_ranges(A=lim$A,B=lim$B,G=lim$G,H=lim$H))
}
lim_ranges(web.lim)
nrow(NULL)
length(c(1:5))
c(1:3,NULL)
c(1:5)/5
c(1:10)*W
c(1:10)*5
