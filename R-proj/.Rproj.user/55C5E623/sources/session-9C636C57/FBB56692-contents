library("LIM")
library("SampleLIM")
library("quadprog")
library("lpSolve")
library("MASS")
library("GGally")
library("tidyverse")


get_Poly_from_LIM <-function(lim){
  tol=sqrt(.Machine$double.eps) #the smallest positive floating-point number x such that 1 + x != 1 on the current machine
  ## 0. Setup problem
  
  Ncomp  <- lim$NComponents
  Nx     <- lim$NUnknowns
  
  #Equalities A*X=B
  A    <- lim$A[]
  B    <- lim$B[]
  
  # Inequalities G*X>=H
  G <- lim$G
  H <- lim$H
  
  
  ## find a particular solution x0
  
  l <- lsei(A=NULL,B=NULL,E=A,F=B,G=G,H=H)
  if (l$residualNorm>1e-6)
    stop("no particular solution found;incompatible constraints")
  else
    x0 <- l$X
  lx <- length(x0)
  
  
  Z <- Null(t(A)); Z[abs(Z)<tol] <- 0  #x=x0+Zq ; AZ=0
  
  k <- ncol(Z)
  
  #Projection de G et H sur l'espace rÃ©duit
  g <- G%*%Z
  h <- H-G%*%x0                                            
  g[abs(g)<tol] <- 0
  h[abs(h)<tol] <- 0
  h<-as.numeric(h)
  
  return(list("A"=-g,"b"=-h,"x0"=x0,"Z"=Z))
  
}

transform_sample_from_redspace <- function(sample,x0,Z){
  
  return(x0+Z%*%as.matrix(sample))
}




filename="DeclarationFileBOWF.txt"
web.lim<- Setup(filename)
start_time <- Sys.time()
res_xsample<-Xsample(web.lim,iter=10,jmp=10)
end_time <- Sys.time()
t_Xsample<-start_time-end_time

start_time <- Sys.time()
pol<-get_Poly_from_LIM(web.lim)
P <- Hpolytope(A = pol$A, b = pol$b)
#inner_ball(P)
res_redspace<-sample_points(P,n=100,random_walk = list("walk"="mirror","L"=40))
res<-transform_sample_from_redspace(res_redspace,pol$x0,pol$Z)
end_time <- Sys.time()
t_newMirror<-start_time-end_time
rownames(res) = web.lim$Unknowns
res<-as_tibble(t(res))
res%>% distinct()
colnames(res)<-web.lim$Unknowns
ggpairs(res,columns=5:7, lower=list(continuous=wrap("points",alpha=0.3,size=0.1),combo=wrap("dot",alpha=0.4,size=0.2)),title =paste(filename,"Volesti"))
